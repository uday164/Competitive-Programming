import java.util.*;


class Node
{
	int data;
	Node left;
	Node right;

	Node(int data)
	{
		this.data = data;
		this.left = null;
		this.right = null;
	}
}


class BinarySearchTreeChecker
{
    ArrayList<Integer> arr = new ArrayList<Integer>();

	Node root;

	BinarySearchTreeChecker(int key)
	{
		root = new Node(key);
	}

	BinarySearchTreeChecker()
	{
		root = null;
	}

	boolean isBST()
	{
        return isBSTUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

     boolean isBSTUtil(Node node, int min, int max)
    {
        if (node == null)
        {
            return true;
        }
 
        if (node.data < min || node.data > max)
        {
            return false;
        }
 

        return (isBSTUtil(node.left, min, node.data-1) && isBSTUtil(node.right, node.data+1, max));
    }

	public static void main(String[] args)
	{
		BinarySearchTreeChecker tree = new BinarySearchTreeChecker();

		tree.root = new Node(4);

		tree.root.left = new Node(2);
		tree.root.right = new Node(8);

		tree.root.left.left = new Node(1);
		tree.root.left.right = new Node(3);

	    tree.root.right.left = new Node(6);
		tree.root.right.right = new Node(11);

		// tree.root.left.right = new Node(5);



		// tree.root.left.left.left = new Node(10);

		if (tree.isBST())
		{
            System.out.println("Given tree is a BST");
		}
        else
        {
            System.out.println("Given tree is not a BST");
        }
	}
}
